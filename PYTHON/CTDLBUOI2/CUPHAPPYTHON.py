#1. C·∫•u tr√∫c c∆° b·∫£n
# Python kh√¥ng c·∫ßn khai b√°o l·ªõp, h√†m b·∫Øt ƒë·∫ßu b·∫±ng def
def ham_chinh():
    print("Xin ch√†o")

if __name__ == "__main__":
    ham_chinh()


#def ‚Üí khai b√°o h√†m

#__name__ == "__main__" ‚Üí ƒëi·ªÉm b·∫Øt ƒë·∫ßu khi ch·∫°y file tr·ª±c ti·∫øp

#Kh√¥ng c·∫ßn d·∫•u ngo·∫∑c {}, d√πng indentation (th·ª•t l·ªÅ)

#üßÆ 2. Bi·∫øn & ki·ªÉu d·ªØ li·ªáu
SoLuong = 10          # int
DiemTrungBinh = 8.5   # float
HoTen = "Nguyen Van A" # str
LaSinhVien = True     # bool
DanhSach = [1,2,3]   # list
Tuples = (1,2,3)      # tuple
TapHop = {1,2,3}      # set
TuKhoa = {'ten':'Thinh', 'tuoi':18} # dict


#Bi·∫øn Python kh√¥ng c·∫ßn khai b√°o ki·ªÉu, t·ª± ƒë·ªông x√°c ƒë·ªãnh

#None t∆∞∆°ng ƒë∆∞∆°ng null trong Java

#‚öôÔ∏è 3. C√¢u l·ªánh ƒëi·ªÅu ki·ªán
if SoLuong > 10:
    print("Nhi·ªÅu")
elif SoLuong == 10:
    print("ƒê√∫ng 10")
else:
    print("√çt")


#Kh√¥ng c√≥ switch-case chu·∫©n (Python 3.10+ c√≥ match-case):

x = 2
match x:
    case 1:
        print("M·ªôt")
    case 2:
        print("Hai")
    case _:
        print("Kh√°c")

#üîÅ 4. V√≤ng l·∫∑p
#For
for i in range(5): # 0 1 2 3 4
    print(i)

for x in [1,2,3]:
    print(x)


#range(start, stop, step) ‚Üí t·∫°o d√£y s·ªë

#While
i = 0
while i < 5:
    print(i)
    i += 1

#üß© 5. H√†m
def Tong(a, b):
    return a + b

print(Tong(2,3))


#*args ‚Üí nh·∫≠n nhi·ªÅu tham s·ªë kh√¥ng gi·ªõi h·∫°n

#**kwargs ‚Üí nh·∫≠n nhi·ªÅu tham s·ªë ƒë·∫∑t t√™n

def demo(*args, **kwargs):
    print(args, kwargs)

#üß± 6. L·ªõp & ƒë·ªëi t∆∞·ª£ng
class NhanVien:
    def __init__(self, HoTen, Tuoi):
        self.HoTen = HoTen
        self.Tuoi = Tuoi

    def xuat(self):
        print(self.HoTen, "-", self.Tuoi)

nv = NhanVien("Thinh", 18)
nv.xuat()


#__init__ ‚Üí h√†m kh·ªüi t·∫°o

#self ‚Üí t∆∞∆°ng ƒë∆∞∆°ng this trong Java

#üßæ 7. Nh·∫≠p/xu·∫•t
HoTen = input("Nh·∫≠p t√™n: ") # luon l√† str
So = int(input("Nh·∫≠p s·ªë: ")) # √©p ki·ªÉu int
print("Xin ch√†o", HoTen)
print(f"ƒêi·ªÉm trung b√¨nh: {8.5:.2f}") # f-string ƒë·ªãnh d·∫°ng

#üöß 8. X·ª≠ l√Ω ngo·∫°i l·ªá
try:
    a = 5 / 0
except ZeroDivisionError as e:
    print("L·ªói chia 0", e)
finally:
    print("Lu√¥n ch·∫°y")


#Exception l√† l·ªõp cha, b·∫Øt chung t·∫•t c·∫£ l·ªói

#raise ‚Üí n√©m l·ªói th·ªß c√¥ng

#üì¶ 9. Th∆∞ vi·ªán th∆∞·ªùng d√πng
#C∆° b·∫£n
import math        # to√°n h·ªçc: sqrt, pow, sin, cos
import random      # s·ªë ng·∫´u nhi√™n: randint, choice, shuffle
import datetime    # th·ªùi gian: datetime.now()
import os          # thao t√°c file, th∆∞ m·ª•c
import sys         # t∆∞∆°ng t√°c h·ªá th·ªëng, tham s·ªë d√≤ng l·ªánh

#D·ªØ li·ªáu & c·∫•u tr√∫c
import collections  # deque, Counter, namedtuple
import itertools    # t·ªï h·ª£p, ho√°n v·ªã

#File & IO
with open("file.txt", "r") as f:
    data = f.read()

#Regex
import re
if re.match(r'\d+', "123abc"):
    print("C√≥ s·ªë ƒë·∫ßu chu·ªói")

#Th∆∞ vi·ªán khoa h·ªçc & d·ªØ li·ªáu
import numpy as np      # m·∫£ng, ma tr·∫≠n
import pandas as pd     # dataframe
import matplotlib.pyplot as plt  # v·∫Ω bi·ªÉu ƒë·ªì

#Web & network
import requests        # HTTP request
import urllib.parse    # encode URL
import socket          # socket network

#Th∆∞ vi·ªán n√¢ng cao
import threading       # ƒëa lu·ªìng
import multiprocessing # ƒëa ti·∫øn tr√¨nh
import logging         # log
import json            # ƒë·ªçc/ghi JSON
import pickle          # l∆∞u object